var __extends=this&&this.__extends||function(t,e){function i(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)};!function(t){!function(t){var e=function(){function t(){}return t.prototype.setClass=function(t,e){this.context=t,this.targetActivityClass=e},t.prototype.getClass=function(){return this.targetActivityClass},t.prototype.getContext=function(){return this.context},t}();t.Intent=e}(t.app||(t.app={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(t,e){isNaN(t)?this.x=0:this.x=t,isNaN(e)?this.y=0:this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.negate=function(){this.x=-this.x,this.y=-this.y},t.prototype.offset=function(t,e){this.x+=t,this.y+=e},t.prototype.equals=function(t,e){return this.x==t&&this.y==e},t.prototype.equalPoint=function(t){return this.equals(t.x,t.y)},t.prototype.hashCode=function(){var t=this.x;return t=31*t+this.y},t.prototype.toString=function(){return"Point("+this.x+", "+this.y+")"},t.prototype.describeContents=function(){return 0},t.prototype.clone=function(){return new t(this.x,this.y)},t}();t.Point=e}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Rect;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right",t[t.Top=3]="Top",t[t.Bottom=4]="Bottom",t[t.Auto=5]="Auto"}(e.Gravity||(e.Gravity={}));var n=function(){function t(t){this.padding=t||0}return Object.defineProperty(t.prototype,"padding",{set:function(t){this.leftPadding=this.rightPadding=this.topPadding=this.bottomPadding=t},enumerable:!0,configurable:!0}),t}();e.Padding=n;!function(t){t[t.Left=0]="Left",t[t.Top=1]="Top",t[t.Right=2]="Right",t[t.Bottom=3]="Bottom"}(e.Position||(e.Position={}));!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(e.Orientation||(e.Orientation={}));var o=function(){function t(t,e,i,n){this.strokeWidth=t,this.strokeColor=e,null!=i&&i instanceof Array&&i.length>0&&(this.dash=i,null==n||isNaN(n)||(this.dashOffset=n))}return t.prototype.getCssStyle=function(){return{"stroke-width":this.strokeWidth,stroke:this.strokeColor}},t.prototype.clone=function(){return new t(this.strokeWidth,this.strokeColor)},t}();e.StrokeStyle=o;var r=function(){function t(t,e,i){this.fontSize=t,this.fontFamily=e,this.fontColor=i,this.fontFamily&&""!==this.fontFamily||(this.fontFamily="Arial")}return t.prototype.toString=function(){return" fontSize = "+this.fontSize+", fontFamily = "+this.fontFamily+", fontColor = "+this.fontFamily},t.prototype.clone=function(){return new t(this.fontSize,this.fontFamily,this.fontColor)},t}();e.Font=r;var s=function(){return function(t,e){this.background=t,this.strokeStyle=e}}();e.Style=s;var a=function(){return function(t){this.colors=[],this.colors=t}}();e.Gradient=a;var h=function(t){function e(e,i,n,o,r){var s=t.call(this,r)||this;return s.startx=e,s.starty=i,s.endx=n,s.endy=o,s}return __extends(e,t),e}(a);e.LinearGradient=h;var u=function(t){function e(e,i,n,o){var r=t.call(this,o)||this;return r.centerx=e,r.centery=i,r.end=n,r}return __extends(e,t),e}(a);e.RadialGradient=u;var c=function(){return function(){}}();e.Shadow=c;var d=function(){return function(){this.fill="transparent"}}();e.FillStyle=d;var l=function(){function e(){}return e.cloneDeep=function(t){if(null==t||"number"==typeof t||"string"==typeof t||"boolean"==typeof t)return t;if(Array.isArray(t)){for(var i=[],n=0,o=t;n<o.length;n++){var r=o[n];i.push(e.cloneDeep(r))}return i}if(t instanceof Date)return new Date(t.getTime());var s={};for(var a in t)"function"==typeof t[a]?s[a]=t[a]:s[a]=e.cloneDeep(t[a]);return s},e.contains=function(t,e){return e.x<=t.right&&e.x>=t.left&&e.y<=t.bottom&&e.y>=t.top},e.getRect=function(t,e){return new i(t.x,t.y,t.x+e.width,t.y+e.height)},e.getStyleCss=function(t){return{fill:t.background,stroke:t.strokeStyle?t.strokeStyle.strokeColor:"","stroke-width":t.strokeStyle?t.strokeStyle.strokeWidth:0}},e.union=function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var n=new t.graphics.Rect(0,0,0,0);return n.left=Math.min.apply(this,e.map(function(t){return t.left})),n.top=Math.min.apply(this,e.map(function(t){return t.top})),n.right=Math.max.apply(this,e.map(function(t){return t.right})),n.bottom=Math.max.apply(this,e.map(function(t){return t.bottom})),n},e.hexToRgb=function(t){t=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(t,e,i,n){return e+e+i+i+n+n});var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null},e.rgbToHex=function(t,i,n){return"#"+e.componentToHex(t)+e.componentToHex(i)+e.componentToHex(n)},e.componentToHex=function(t){var e=t.toString(16);return 1==e.length?"0"+e:e},e.asEnum=function(t,e,i){if(void 0===i&&(i=!1),null==t&&i)return null;var n=e[t];return"number"==typeof n?n:t},e.isMixed=function(t,e){var i=!1;return Math.abs((t.left+t.right)/2-(e.left+e.right)/2)<(t.right+e.right-t.left-e.left)/2&&Math.abs((t.top+t.bottom)/2-(e.top+e.bottom)/2)<(t.bottom+e.bottom-t.top-e.top)/2&&(i=!0),i},e.containsRect=function(t,e){return t.left<=e.left&&t.top<=e.top&&t.right>=e.right&&t.bottom>=e.bottom},e}();e.Util=l}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(){}return Object.defineProperty(t,"width",{get:function(){return 0==t._width&&(t._width=window.innerWidth>0?window.innerWidth:screen.width),t._width},set:function(e){t._width=e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"height",{get:function(){return 0==t._height&&(t._height=window.innerHeight>0?window.innerHeight:screen.height),t._height},set:function(e){t._height=e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"density",{get:function(){return 0===t._density&&(t._density=Math.sqrt(t.width*t.width+t.height*t.height)/160),1},enumerable:!0,configurable:!0}),t}();e._density=0,e._width=0,e._height=0,t.Device=e}(t.device||(t.device={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(){}return t.d=function(t,e){console.log(t)},t.w=function(t,e){console.warn(t)},t.e=function(t,e){console.error(t)},t}();t.Log=e}(t.util||(t.util={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Font,n=t.graphics.StrokeStyle,o=t.graphics.Style,r=function(){function t(){}return Object.defineProperty(t,"font",{get:function(){return new i(10,"","white")},enumerable:!0,configurable:!0}),Object.defineProperty(t,"strokestyle",{get:function(){return new n(1,"black")},enumerable:!0,configurable:!0}),Object.defineProperty(t,"style",{get:function(){return new o("gray",t.strokestyle)},enumerable:!0,configurable:!0}),t}();e.Default=r}(t.device||(t.device={}))}(android||(android={}));!function(t){!function(e){var i,n=t.graphics.Point,o=t.device.Device,r=t.device.Default;!function(t){t[t.Canvas=0]="Canvas",t[t.Svg=1]="Svg"}(i=e.RenderType||(e.RenderType={}));var s=function(){return function(t,e){this.xOffset=0,this.yOffset=0,this.xOffset=t,this.yOffset=e}}(),a=function(t){return Math.floor(1e3*t)/1e3},h=function(){function t(t,n){this.xOffset=0,this.yOffset=0,this.saveStates=[],this._hostElement=t,this._renderType=n,n===i.Canvas?(this._render=new e.CanvasRenderEngine(t),t.style.width=o.width+"px",t.style.height=o.height+"px",this._render.setViewportSize(o.width,o.height)):n===i.Svg&&(this._render=new e.SvgRenderEngine(t),t.style.width=o.width+"px",t.style.height=o.height+"px",this._render.setViewportSize(o.width,o.height))}return t.prototype.clearRect=function(t,e,i,n){},t.prototype.save=function(){var t=new s(this.xOffset,this.yOffset);this.saveStates.push(t),this._render.save()},t.prototype.clip=function(t){t.clone().translate(this.xOffset,this.yOffset),this._render instanceof e.CanvasRenderEngine?this._render.clip(t):this._render.clip()},t.prototype.restore=function(){this.saveStates.pop();var t=this.saveStates[this.saveStates.length-1];t?(this.xOffset=t.xOffset,this.yOffset=t.yOffset):(this.xOffset=0,this.yOffset=0),this._render instanceof e.CanvasRenderEngine&&this._render.restore()},t.prototype.setViewportSize=function(t,e){this._render.setViewportSize(t,e)},t.prototype.measureString=function(t,e,i){e||(e=r.font.clone());var n=e.clone();return n.fontSize*=o.density,this._render.measureString(t,n)},t.prototype.measureStringWithWidth=function(t,e){},t.prototype.drawText=function(t,i,s,a,h){s||(s=r.font.clone());var u=this.measureString(t,s),c=s.clone();c.fontSize*=o.density;var d=new n(i.x,i.y+u.height);i.clone();this._render instanceof e.CanvasRenderEngine?null!=h?this._render.drawStringRotated(t,d,a,h,c):this._render.drawString(t,d,c):this._render instanceof e.SvgRenderEngine&&(d.offset(this.xOffset,this.yOffset),null!=h?this._render.drawStringRotated(t,d,a,h,null,{"font-size":c.fontSize,"font-family":c.fontFamily}):this._render.drawString(t,d,null,{"font-size":c.fontSize,"font-family":c.fontFamily}))},t.prototype.drawPosText=function(t,e,o){if(2*t.length>e.length)throw"IndexOutOfBoundsException";if(o||(o=r.font),this._renderType===i.Canvas)for(var s=new n(0,0),a=0;a<e.length;a+=2)s.set(e[a],e[a+1]),this.drawText(t[a/2],s,o)},t.prototype.drawLine=function(t,e,n){var o=null;o=n?n.clone():r.strokestyle.clone();var s=t.clone(),a=e.clone();this._renderType===i.Canvas?this._render.drawLine(s.x,s.y,a.x,a.y,o):(s.offset(this.xOffset,this.yOffset),a.offset(this.xOffset,this.yOffset),this._render.drawLine(s.x,s.y,a.x,a.y,o))},t.prototype.drawLines=function(t,i,n){var o=null;o=n?n.clone():r.strokestyle.clone(),this._render instanceof e.CanvasRenderEngine?this._render.drawLines(t,i,o):this._render instanceof e.SvgRenderEngine&&(o.transform="translate("+this.xOffset+","+this.yOffset+")",this._render.drawLines(t,i,null,o.getCssStyle()))},t.prototype.drawRect=function(t,i,n,o){var r=t.clone(),s=i.clone();this._render instanceof e.CanvasRenderEngine?this._render.drawRect(r.x,r.y,s.x-r.x,s.y-r.y,o,n):this._render instanceof e.SvgRenderEngine&&(r.offset(this.xOffset,this.yOffset),s.offset(this.xOffset,this.yOffset),n?this._render.drawRect(r.x,r.y,s.x-r.x,s.y-r.y,null,{fill:"string"==typeof o.background?o.background:null},null):this._render.drawRect(r.x,r.y,s.x-r.x,s.y-r.y,null,{fill:"transparent",stroke:"string"==typeof o.background?o.background:null},null))},t.prototype.drawArc=function(t,i,n,o){var r=(t.right-t.left)/2+t.left+this.xOffset,s=(t.bottom-t.top)/2+t.top+this.yOffset,h=(t.width<t.height?t.width:t.height)/2;this._render instanceof e.SvgRenderEngine?this._render.drawPie(r,s,h,a(i),a(n),null,{fill:"string"==typeof o.background?o.background:null}):this._render instanceof e.CanvasRenderEngine&&this._render.drawPie(r,s,h,a(i),a(n),o)},t.prototype.drawDonut=function(t,i,n,o,r,s,h){var u=t+this.xOffset,c=i+this.yOffset;this._render instanceof e.SvgRenderEngine?this._render.drawDonut(u,c,n,o,a(r),a(s),null,{fill:"string"==typeof h.background?h.background:null}):this._render instanceof e.CanvasRenderEngine&&this._render.drawDonut(u,c,n,o,r,s,h)},t.prototype.drawOval=function(t,e){},Object.defineProperty(t.prototype,"alpha",{set:function(t){this._render.alpha=t},enumerable:!0,configurable:!0}),t.prototype.drawPolygon=function(t,i,n){this._render instanceof e.SvgRenderEngine?this._render.drawPolygon(t,i,null,{fill:"string"==typeof n.background?n.background:null}):this._render instanceof e.CanvasRenderEngine&&this._render.drawPolygon(t,i,n)},t.prototype.drawImage=function(t,e,i,n){},t.prototype.getCache=function(t,e,i,n){return null},t.prototype.setCache=function(t,e,i,n,o,r,s){},t.prototype.begin=function(){this._render.beginRender()},t.prototype.end=function(){this._render.endRender()},t.prototype.moveTo=function(t,i){this._render instanceof e.CanvasRenderEngine&&this._render.moveTo(t,i)},t.prototype.scale=function(t,i){console.log("canvasScale "+t+" , "+i),this._render instanceof e.CanvasRenderEngine&&this._render.scale(t,i)},t.prototype.rotate=function(t){this._render instanceof e.CanvasRenderEngine&&this._render.rotate(t)},t.prototype.translate=function(t,i){this.xOffset=t,this.yOffset=i,this._render instanceof e.CanvasRenderEngine&&this._render.translate(t,i)},t}();e.Canvas=h}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(t){var e=function(){return function(){}}();t.Context=e}(t.app||(t.app={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(t,e){this.width=t,this.height=e}return t.prototype.clone=function(){return new t(this.width,this.height)},t.prototype.hashCode=function(){return 37213*this.width+this.height},t}();t.Size=e}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(t,e,i,n){this.marginLeft=t,this.marginTop=i,this.marginRight=e,this.marginBottom=n}return t.prototype.getStartXMargin=function(){return this.marginRight>0&&!this.marginLeft?-this.marginRight:this.marginLeft},t.prototype.getStartYMargin=function(){return this.marginBottom>0&&!this.marginTop?-this.marginBottom:this.marginTop},t}();t.Margin=e}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Point,n=function(){function t(t,e,i,n){this.left=t,this.top=e,this.right=i,this.bottom=n}return t.prototype.reset=function(t,e,i,n){return this.left=t,this.top=e,this.right=i,this.bottom=n,this},t.prototype.correct=function(){if(this.left>this.right){var t=this.left;this.left=this.right,this.right=t}if(this.top>this.bottom){var e=this.top;this.top=this.bottom,this.bottom=e}},t.prototype.translate=function(t,e){return this.left+=t,this.right+=t,this.top+=e,this.bottom+=e,this},t.prototype.translateX=function(t){return this.translate(t,0),this},t.prototype.translateY=function(t){return this.translate(0,t),this},t.prototype.scale=function(t){if(t>0){var e=this.width*t-this.width,i=this.height*t-this.height;this.left-=e/2,this.right+=e/2,this.top-=i/2,this.bottom+=i/2}return this},Object.defineProperty(t.prototype,"isNil",{get:function(){return this.right-this.left<=.01||this.bottom-this.top<=.01},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.bottom-this.top},set:function(t){this.bottom=this.top+t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.right-this.left},set:function(t){this.right=this.left+t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"startPoint",{get:function(){return this._startpoint||(this._startpoint=new i(this.left,this.top)),this._startpoint.x=this.left,this._startpoint.y=this.top,this._startpoint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"endPoint",{get:function(){return this._endpoint||(this._endpoint=new i(this.right,this.bottom)),this._endpoint.x=this.right,this._endpoint.y=this.bottom,this._endpoint},enumerable:!0,configurable:!0}),t.prototype.contains=function(t,e){return t<=this.right&&t>=this.left&&e<=this.bottom&&e>=this.top},t.prototype.clone=function(){return new t(this.left,this.top,this.right,this.bottom)},t.prototype.equal=function(t){return null!=t&&(t.left===this.left&&t.top===this.top&&t.bottom===this.bottom&&t.right===this.right)},t.prototype.toString=function(){return"< left:"+this.left+" ,top:"+this.top+" , width:"+this.width+" ,height:"+this.height+" >"},t}();e.Rect=n}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Rect,n=t.graphics.Padding,o=t.graphics.Margin,r=function(){function t(t,e,n,o,r,s){this.outterrect=new i(t,e,n,o),this.padding=r,this.innerrect=new i(this.outterrect.left+r.leftPadding,this.outterrect.top+r.topPadding,this.outterrect.right-r.rightPadding,this.outterrect.bottom-r.bottomPadding),this.drawindex=s||0}return t.prototype.reset=function(t,e,n,o,r,s){this.outterrect=new i(t,e,n,o),this.padding=r,this.innerrect=new i(this.outterrect.left+r.leftPadding,this.outterrect.top+r.topPadding,this.outterrect.right-r.rightPadding,this.outterrect.bottom-r.bottomPadding),this.drawindex=s||0},t.prototype.offset=function(t,e){this.innerrect.translate(t,e),this.outterrect.translate(t,e)},t.prototype.clone=function(){var e=new t(0,0,0,0,new n(0));return e.drawindex=this.drawindex,e.innerrect=this.innerrect.clone(),e.outterrect=this.outterrect.clone(),e},t.prototype.equal=function(t){return null!=t&&(t.drawindex===this.drawindex&&this.innerrect.equal(t.innerrect)&&this.outterrect.equal(t.outterrect))},t}();e.LayoutInfo=r;var s=function(){function t(t,e,i){this.margin=new o(0,0,0,0),this.width=t,this.height=e,i&&(this.margin=i)}return Object.defineProperty(t.prototype,"width",{get:function(){return this._width<0?0:this._width},set:function(t){this._width=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"widthMode",{get:function(){var e=t.EXACTLY;switch(this._width){case t.WRAP_CONTENT:e=t.WRAP_CONTENT;break;case t.MATCH_PARENT:e=t.MATCH_PARENT;break;case t.EXACTLY:default:e=t.EXACTLY}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"heightMode",{get:function(){var e=t.EXACTLY;switch(this._height){case t.WRAP_CONTENT:e=t.WRAP_CONTENT;break;case t.MATCH_PARENT:e=t.MATCH_PARENT;break;case t.EXACTLY:default:e=t.EXACTLY}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height<0?0:this._height},set:function(t){this._height=t},enumerable:!0,configurable:!0}),t}();s.MATCH_PARENT=-1,s.WRAP_CONTENT=-2,s.EXACTLY=-3,e.LayoutParams=s;var a=function(){function t(t,e){this.mode=s.EXACTLY,void 0!==t&&(this.value=t),void 0!==e&&(this.mode=e)}return t.prototype.getMeasureValue=function(){switch(this.mode){case s.MATCH_PARENT:case s.EXACTLY:return this.value;case s.WRAP_CONTENT:default:return this.value?this.value:s.WRAP_CONTENT}},t}();e.MeasureSpec=a}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(t){!function(t){var e=function(){function t(t,e,i){this._x=t,this._y=e,this.screenX=t,this.screenY=e,this._action=i}return Object.defineProperty(t.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"deltaX",{get:function(){return this._deltaX},set:function(t){this._deltaX=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"deltaY",{get:function(){return this._deltaY},set:function(t){this._deltaY=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"action",{get:function(){return this._action},set:function(t){this._action=t},enumerable:!0,configurable:!0}),t.prototype.clone=function(){return new t(this._x,this._y,this._action)},t.prototype.offset=function(t,e){this._x+=t,this._y+=e,this.screenX+=t,this.screenY+=e},t.prototype.toString=function(){var t=(null==this.deltaX?"":" , deltaX = "+this.deltaX)+(null==this.deltaY?"":" , deltaY = "+this.deltaY);return" x = "+this._x+" , y = "+this._y+t+" , action = "+this._getaction()},t.prototype._getaction=function(){switch(this._action){case 0:return"ACTION_OUTSIDE";case 1:return"ACTION_UP";case 2:return"ACTION_MOVE";case 3:return"ACTION_CANCEL";case 4:return"ACTION_OUTSIDE";case 5:return"ACTION_MOUSE_DOWN";case 6:return"ACTION_MOUSE_MOVE";case 7:return"ACTION_MOUSE_UP";case 8:return"ACTION_MOUSE_OVER";case 9:return"ACTION_MOUSE_OUT";case 10:return"ACTION_CLICK";case 11:return"ACTION_MOUSE_ON";case 12:return"ACTION_MOUSE_WHEEL"}},t}();e.ACTION_DOWN=0,e.ACTION_UP=1,e.ACTION_MOVE=2,e.ACTION_CANCEL=3,e.ACTION_OUTSIDE=4,e.ACTION_MOUSE_DOWN=5,e.ACTION_MOUSE_MOVE=6,e.ACTION_MOUSE_UP=7,e.ACTION_MOUSE_OVER=8,e.ACTION_MOUSE_OUT=9,e.ACTION_MOUSE_ON=11,e.ACTION_CLICK=10,e.ACTION_SCROLL=11,e.ACTION_MOUSE_WHEEL=12,t.MotionEvent=e}(t.event||(t.event={}))}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(t){!function(t){var e;!function(t){t[t.BeforeStart=0]="BeforeStart",t[t.Animating=1]="Animating",t[t.End=2]="End"}(e=t.AnimationState||(t.AnimationState={}));var i=function(){function i(){this.duration=0,this.__oldProprity=0,this.ease=new t.AnimationEase,this.start=0,this.duration=0,this.type=t.AnimationType.Alpha,this.from=1,this.to=1,this.state=e.BeforeStart,this.fillAfter=!1}return i.prototype.setAnimationCallBack=function(t,e){this._startCallBack=t,this._endCallBack=e},Object.defineProperty(i.prototype,"isAniamtionEnd",{get:function(){return this.start+this.duration<Date.now()},enumerable:!0,configurable:!0}),i.prototype.scale=function(t){return this.ease.ease((t-this.start)/this.duration)},i.prototype.applyTransformation=function(t,e,i){},i.prototype.onStartAniamtion=function(t,e){this.__oldProprity=e.priority,e.priority=9999999,this._startCallBack&&this._startCallBack(e)},i.prototype.onEndAnimation=function(t,e){e.priority=this.__oldProprity,this._endCallBack&&this._endCallBack(e)},i}();t.Animation=i}(t.animation||(t.animation={}))}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(t){!function(t){var e=function(){function t(){}return t.prototype.ease=function(t){return t},t}();t.AnimationEase=e;var i=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.ease=function(t){var e=7.5625;return(t=+t)<4/11?e*t*t:t<8/11?e*(t-=6/11)*t+.75:t<10/11?e*(t-=9/11)*t+.9375:e*(t-=21/22)*t+63/64},e}(e);t.BounceAnimationEase=i;var n=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.ease=function(t){var e=Math.PI/2;return Math.sin(t*e)},e}(e);t.SinAnimationEase=n;var o=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.ease=function(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2},e}(e);t.QuadAnimationEase=o}(t.animation||(t.animation={}))}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(e){var i,n=t.graphics.Padding,o=t.graphics.Size,r=t.graphics.Gravity,s=t.device.Default;!function(t){t[t.Visiable=0]="Visiable",t[t.InVisiable=1]="InVisiable",t[t.Gone=2]="Gone"}(i=e.ViewState||(e.ViewState={}));var a=function(){function t(t){this.id="",this._padding=new n,this.priority=0,this.layoutParams=new e.LayoutParams(0,0,null),this._parent=null,this._drawingTime=0,this.offsetleft=0,this.offsettop=0,this.visiable=i.Visiable,this._context=t,this._gravity=r.Left,this._background=s.style,this._background.background="transparent",this._background.strokeStyle.strokeColor="transparent",this._background.strokeStyle.strokeWidth=0,this.id=1e7*Math.random()+"",this._animationList=[]}return t.prototype.getContext=function(){return this._context},t.prototype.onMeasure=function(t,i,n){this._layoutInfo=new e.LayoutInfo(0,0,0,0,this.padding,0);var r=this.layoutParams.width,s=this.layoutParams.height,a=new o(r,s),h=this.layoutParams.widthMode,u=this.layoutParams.heightMode;return h===e.LayoutParams.MATCH_PARENT&&(a.width=t.value),u===e.LayoutParams.MATCH_PARENT&&(a.height=i.value),this.setMeasuredDimension(new e.MeasureSpec(a.width,e.LayoutParams.EXACTLY),new e.MeasureSpec(a.height,e.LayoutParams.EXACTLY)),a},t.prototype.getDrawingTime=function(){return null!=this.parent?this._drawingTime:Date.now()},t.prototype.setDrawingTime=function(t){this._drawingTime=t},t.prototype.onLayout=function(t,e,i,n,o){null!=this.layoutInfo&&(this._oldLayoutInfo=this.layoutInfo.clone()),this.layoutInfo.reset(t+this.offsetleft,e+this.offsettop,i+this.offsetleft,n+this.offsettop,this.padding,0)},t.prototype.islayoutChanged=function(){return!this.layoutInfo.equal(this._oldLayoutInfo)},t.prototype.onDraw=function(t){this.visiable==i.Visiable&&(this._canvas=t,this.background&&t.drawRect(this._layoutInfo.outterrect.startPoint,this._layoutInfo.outterrect.endPoint,!0,this.background))},t.prototype.setMeasuredDimension=function(t,e){this._width=t,this._height=e},t.prototype.onTouchEvent=function(t){return!1},t.prototype.onMouseEvent=function(t){return!1},t.prototype.invalidate=function(t){(t=!0)?this.parent?this.parent.invalidate(t):this.oninvalidate():(this.parent.invalidateChild(this,this.layoutInfo.outterrect),this.oninvalidate())},t.prototype.getRootView=function(){if(null!=this.parent){var t=this.parent;do{t=t.parent}while(null!=t.parent);return t}return this},t.prototype.oninvalidate=function(){},t.prototype.requestLayout=function(){this.parent&&this.parent.requestLayout()},t.prototype.startAnimation=function(t){var e=this;if(null==this.animation||this.animation.isAniamtionEnd)this.animation=t,null!=this.animation&&this.getRootView().startAnimation(t),this.invalidate(!1);else{this._animationList.push(t);var i=this.animation.onEndAnimation;this.animation.onEndAnimation=function(t,n){if(i(t,n),e._animationList.length>0){var o=e._animationList.pop();e.startAnimation(o)}}}},t.prototype.setParent=function(t){this._parent=t},t.prototype.offset=function(t,e){if(this.offsetleft+=t,this.offsettop+=e,isNaN(t)||isNaN(this.offsetleft))throw console.log("offset error"),"offset error ";console.log("offset "+e)},Object.defineProperty(t.prototype,"parent",{get:function(){return this._parent},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this._width.getMeasureValue()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height.getMeasureValue()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"padding",{get:function(){return this._padding},set:function(t){this._padding=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this._layoutInfo.outterrect.left},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this._layoutInfo.outterrect.top},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this._layoutInfo.outterrect.right},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bottom",{get:function(){return this._layoutInfo.outterrect.bottom},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"background",{get:function(){return this._background},set:function(t){this._background=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"layoutInfo",{get:function(){return this._layoutInfo||(this._layoutInfo=new e.LayoutInfo(0,0,0,0,this.padding,0)),this._layoutInfo},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"gravity",{get:function(){return this._gravity},set:function(t){this._gravity=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"clip",{get:function(){return this._clip},set:function(t){this._clip=t},enumerable:!0,configurable:!0}),t}();e.View=a}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Size,n=t.view.event.MotionEvent,o=t.graphics.Util,r=t.view.animation.AnimationState,s=function(t){function s(){var e=t.apply(this,arguments)||this;return e.children=new Array,e._mCurrentTouchTarget=null,e._isIntercept=!1,e.lastInterceptEvent=[],e}return __extends(s,t),s.prototype.dispatchDraw=function(t){for(var i,n=0;n<this.children.length;++n)(i=this.children[n]).setDrawingTime(this.getDrawingTime()),i.visiable==e.ViewState.Visiable&&(void 0===i.clip&&(i.clip=this.clip),!0===i.clip||void 0===i.clip?(t.save(),t.clip(i.layoutInfo.outterrect),this.drawChild(t,i),t.restore()):this.drawChild(t,i))},s.prototype.drawChild=function(t,e){null==e.animation||e.animation.isAniamtionEnd?(null!=e.animation&&e.animation.isAniamtionEnd&&e.animation.state!=r.End&&(e.animation.state=r.End,e.animation.onEndAnimation(t,e),e.animation.fillAfter||(e._layoutInfo=e._oldLayoutInfo.clone())),e.onDraw(t),e instanceof s&&e.dispatchDraw(t)):(t.save(),e.animation.state===r.BeforeStart&&(e._layoutInfo=e._oldLayoutInfo.clone(),e.animation.onStartAniamtion(t,e),e.animation.state=r.Animating),e.animation.applyTransformation(e.animation.scale(this.getDrawingTime()),t,e),e.onDraw(t),e instanceof s&&e.dispatchDraw(t),t.restore())},s.prototype.oninvalidate=function(){for(var t=0;t<this.children.length;++t)this.children[t].oninvalidate()},s.prototype.invalidateChild=function(t,e){if(o.containsRect(this.layoutInfo.outterrect,e)){var i=o.union(e,this.layoutInfo.outterrect);this.parent.invalidateChild(this,i),this.oninvalidate()}else this.dispatchDraw(this._canvas)},s.prototype.getChildCount=function(){return this.children.length},s.prototype.getChildAt=function(t){return this.children[t]},s.prototype.getSortViews=function(){return this.children},s.prototype.onLayout=function(e,i,n,o,r){t.prototype.onLayout.call(this,e,i,n,o,r)},s.prototype.onMeasure=function(t,n,o){for(var r,s=0;s<this.children.length;++s){var a=this.children[s],h=a.layoutParams,u=h.width,c=h.height;h.heightMode===e.LayoutParams.MATCH_PARENT&&(c=n.value-a.layoutParams.margin.marginTop-a.layoutParams.margin.marginBottom-this.padding.topPadding-this.padding.bottomPadding),h.widthMode===e.LayoutParams.MATCH_PARENT&&(u=t.value-a.layoutParams.margin.marginLeft-a.layoutParams.margin.marginRight-this.padding.leftPadding-this.padding.rightPadding);var d=a.onMeasure(new e.MeasureSpec(u,h.widthMode),new e.MeasureSpec(c,h.heightMode),o);a.visiable===e.ViewState.Gone&&(d=new i(0,0)),r?(r.width<d.width&&(r.width=d.width),r.height<d.height&&(r.height=d.height)):r=d}return r||(r=new i(0,0)),this.layoutParams.widthMode===e.LayoutParams.EXACTLY?r.width=this.layoutParams.width:this.layoutParams.widthMode===e.LayoutParams.MATCH_PARENT&&(r.width=t.getMeasureValue()),this.layoutParams.heightMode===e.LayoutParams.EXACTLY?r.height=this.layoutParams.height:this.layoutParams.heightMode===e.LayoutParams.MATCH_PARENT&&(r.height=n.getMeasureValue()),this.setMeasuredDimension(new e.MeasureSpec(r.width,e.LayoutParams.EXACTLY),new e.MeasureSpec(r.height,e.LayoutParams.EXACTLY)),r},s.prototype.addView=function(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=null),this.addViewWithOutReLayout(t,e,i),this.requestLayout(),e},s.prototype.notifyDrawOrderChanged=function(){this.children.sort(function(t,e){return t.priority-e.priority})},s.prototype.addViewWithOutReLayout=function(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=null),this.children.push(t),this.notifyDrawOrderChanged(),t.layoutInfo.drawindex=void 0!==e&&null!==e&&e>=0?e:this.children.length-1,null!=i&&(t.layoutParams=i),t.setParent(this),e},s.prototype.removeAllViews=function(){this.children.length=0},s.prototype.removeView=function(t){var e=this.children.indexOf(t);this.children.splice(e,1),t.setParent(null)},s.prototype.onInterceptTouchEvent=function(t){return!1},s.prototype.dispatchTouchEvent=function(t){var e=this;if(!this._mCurrentTouchTarget||this._mCurrentTouchTarget instanceof s){var i=!1;switch(t.action){case n.ACTION_DOWN:if(!this._mCurrentTouchTarget)for(var o=0;this.children&&o<this.children.length;++o){var r=this.children[o];r&&r.layoutInfo.outterrect.contains(t.x,t.y)&&(this._mCurrentTouchTarget=r)}return!this._mCurrentTouchTarget||((i=!(this._mCurrentTouchTarget instanceof s)||this._mCurrentTouchTarget.onInterceptTouchEvent(t))?(this._mCurrentTouchTarget.onTouchEvent(t),this._isIntercept=i,!0):(this.lastInterceptEvent.push(t.clone()),!1));case n.ACTION_MOVE:if(this._mCurrentTouchTarget)return this._isIntercept?(this._mCurrentTouchTarget.onTouchEvent(t),!0):(i=!(this._mCurrentTouchTarget instanceof s)||this._mCurrentTouchTarget.onInterceptTouchEvent(t))?(this._isIntercept=i,this.lastInterceptEvent.forEach(function(t){e._mCurrentTouchTarget.onTouchEvent(t)}),this.lastInterceptEvent.length=0,this._mCurrentTouchTarget.onTouchEvent(t),!0):(this.lastInterceptEvent.forEach(function(t){e._mCurrentTouchTarget instanceof s&&e._mCurrentTouchTarget.dispatchTouchEvent(t)}),this.lastInterceptEvent.length=0,this._mCurrentTouchTarget instanceof s&&this._mCurrentTouchTarget.dispatchTouchEvent(t));case n.ACTION_UP:case n.ACTION_CANCEL:if(this._mCurrentTouchTarget)return this.lastInterceptEvent.forEach(function(t){e._isIntercept?e._mCurrentTouchTarget.onTouchEvent(t):e._mCurrentTouchTarget.dispatchTouchEvent(t)}),this._isIntercept?(this._mCurrentTouchTarget.onTouchEvent(t),i=!0):i=this._mCurrentTouchTarget.dispatchTouchEvent(t),this._mCurrentTouchTarget=null,this.lastInterceptEvent.length=0,this._isIntercept=!1,i}}return!1},s.prototype.onInterceptMouseEvent=function(t){return!1},s.prototype.onMouseEvent=function(t){return!1},s.prototype.dispatchMouseEvent=function(t){if(t.action!==n.ACTION_MOUSE_OUT&&t.action!==n.ACTION_MOUSE_UP||(null!=this._mCurrentTouchTarget&&((r=t.clone()).action=n.ACTION_MOUSE_OUT,this._mCurrentTouchTarget instanceof s?this._mCurrentTouchTarget.onInterceptMouseEvent(r)?this._mCurrentTouchTarget.onMouseEvent(r):this._mCurrentTouchTarget.dispatchMouseEvent(r):this._mCurrentTouchTarget.onMouseEvent(r),this._isIntercept=!1),this._mCurrentTouchTarget=null),null==this._mCurrentTouchTarget){this._isIntercept=!1;for(var e=0;this.children&&e<this.children.length;++e){var i=this.children[e];i&&i.layoutInfo.outterrect.contains(t.x,t.y)&&(this._mCurrentTouchTarget=i)}if(null!=this._mCurrentTouchTarget){var o=t.clone();return o.action=n.ACTION_MOUSE_ON,this._mCurrentTouchTarget instanceof s?this._mCurrentTouchTarget.onInterceptMouseEvent(o)?this._mCurrentTouchTarget.onMouseEvent(o):this._mCurrentTouchTarget.dispatchMouseEvent(o):this._mCurrentTouchTarget.onMouseEvent(o)}}else if(!this._mCurrentTouchTarget.layoutInfo.outterrect.contains(t.x,t.y)){var r=t.clone();r.action=n.ACTION_MOUSE_OUT;var a=!1;return a=this._mCurrentTouchTarget instanceof s?this._mCurrentTouchTarget.onInterceptMouseEvent(r)?this._mCurrentTouchTarget.onMouseEvent(r):this._mCurrentTouchTarget.dispatchMouseEvent(r):this._mCurrentTouchTarget.onMouseEvent(r),this._mCurrentTouchTarget=null,a}return null==this._mCurrentTouchTarget?this.onMouseEvent(t):this._mCurrentTouchTarget instanceof s?this._mCurrentTouchTarget.onInterceptMouseEvent(t)?this._mCurrentTouchTarget.onMouseEvent(t):this._mCurrentTouchTarget.dispatchMouseEvent(t):this._mCurrentTouchTarget.onMouseEvent(t)},s}(e.View);e.ViewGroup=s}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Gravity,n=t.view.ViewGroup,o=t.graphics.Point,r=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.onMeasure=function(e,i,n){return t.prototype.onMeasure.call(this,e,i,n)},e.prototype.onLayout=function(t,e,i,n,o){this.layoutInfo.reset(t,e,i,n,this.padding,0);for(var r,s=this.children.length,a=0;a<s;++a)r=this.children[a],this.layoutItem(r,t,e,i,n,o)},e.prototype.layoutItem=function(t,e,n,r,s,a){var h=new o(this.layoutInfo.innerrect.left,this.layoutInfo.innerrect.top),u=this.layoutInfo.innerrect,c=(this.children.length,t.layoutParams.margin);switch(t.gravity){case i.Left:h.set(u.left,u.top),h.offset(c.marginLeft,c.marginTop);break;case i.Auto:h.set(u.left,u.top);break;case i.Right:h.set(u.right-t.width,u.top),h.offset(-c.marginRight,c.marginTop);break;case i.Top:h.set(u.left,u.top),h.offset(c.marginLeft,c.marginTop);break;case i.Bottom:h.set(u.left,u.bottom-t.height),h.offset(c.marginLeft,-c.marginBottom);break;case i.Center:var d=u.left+(this.layoutInfo.innerrect.width-t.width)/2,l=u.top+(this.layoutInfo.innerrect.height-t.height)/2;d<0&&(d=0),l<0&&(l=0),h.set(d,l)}t.onLayout(h.x,h.y,h.x+t.width,h.y+t.height,a)},e}(n);e.FrameLayout=r}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=t.view.LayoutParams,n=t.widget.FrameLayout,o=t.util.Log,r=function(t){function r(o){var r=t.call(this)||this;if(!(o instanceof e.ActivityManager))throw"can't create Activity new ";r.activityManager=o,r.rootView=new n(r);var s=new i(i.MATCH_PARENT,i.MATCH_PARENT,null);return r.rootView.layoutParams=s,r}return __extends(r,t),r.prototype.attatchRootView=function(t){t.addView(this.rootView,0)},r.prototype.onCreate=function(t){o.d("oncreate")},r.prototype.onPause=function(){o.d("onPause")},r.prototype.onResume=function(){o.d("onResume")},r.prototype.onDestory=function(){o.d("onDestory")},r.prototype.setContentView=function(t){this.rootView.addView(t,0)},r.prototype.startActivityForResult=function(t,e,i,n){this.activityManager.sendStartActivity(t,e,i,n)},r}(e.Context);e.Activity=r}(t.app||(t.app={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Padding,n=t.graphics.Canvas,o=t.view.MeasureSpec,r=t.view.LayoutParams,s=t.view.event.MotionEvent,a=t.device.Device,h=function(t){function e(){var e=t.apply(this,arguments)||this;return e.throttle=!0,e}return __extends(e,t),e.prototype.setInfo=function(t,e,n,o){this._l=t,this._t=e,this._w=n,this._h=o,this.layoutParams.width=n,this.layoutParams.height=o,this.padding=new i(0)},e.prototype.dispatchDraw=function(e){t.prototype.dispatchDraw.call(this,e);var i=this.layoutInfo.outterrect;e.drawRect(i.startPoint,i.endPoint,!1,this.background)},e.prototype.onLayout=function(e,i,n,o,r){t.prototype.onLayout.call(this,e,i,n,o,r)},e.prototype.oninvalidate=function(){t.prototype.oninvalidate.call(this),this._canvas.begin(),this.dispatchDraw(this._canvas),this._canvas.end()},e.prototype.requestLayout=function(){var t=new o(this._w,r.MATCH_PARENT),e=new o(this._h,r.MATCH_PARENT);this._canvas.begin();var i=this.onMeasure(t,e,this._canvas);this.onLayout(this._l,this._t,this._l+i.width,this._t+i.height,this._canvas),this._canvas.end(),this.oninvalidate()},Object.defineProperty(e.prototype,"left",{get:function(){return this._l},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"top",{get:function(){return this._t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._w},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._h},enumerable:!0,configurable:!0}),e.prototype.startAnimation=function(t){this.animation=t,this._startAnimation()},e.prototype._startAnimation=function(){this.animation.start=Date.now(),null==this._rootAniamtion||this._rootAniamtion.isAniamtionEnd?(this._rootAniamtion=this.animation,window.requestAnimationFrame(this._animate.bind(this)),console.log("requestAnimationFrame ====== >>>>>  ")):this._rootAniamtion.duration+this._rootAniamtion.start<this.animation.duration+this.animation.start&&(this._rootAniamtion.duration=this.animation.start+this.animation.duration-this._rootAniamtion.start)},e.prototype._animate=function(){null==this._rootAniamtion||this._rootAniamtion.isAniamtionEnd?(this._rootAniamtion=null,this.invalidate(!1)):(this.invalidate(!1),window.requestAnimationFrame(this._animate.bind(this)))},e.prototype.addView=function(e,i){return t.prototype.addView.call(this,e,i),i},e.prototype.attachRender=function(t){this._canvas=t},e.prototype.attachElement=function(t,e){this.element=t,this.element.ontouchstart=this.ontouch.bind(this),this.element.ontouchmove=this.ontouch.bind(this),this.element.ontouchend=this.ontouch.bind(this),this.element.ontouchcancel=this.ontouch.bind(this),this.element.onmousedown=this.ontouch.bind(this),this.element.onmousemove=this.ontouch.bind(this),this.element.onmouseup=this.ontouch.bind(this),this.element.onmouseout=this.ontouch.bind(this),this.element.onmouseover=this.ontouch.bind(this),this.element.onmousewheel=this.ontouch.bind(this),this.element.onclick=this.ontouch.bind(this),this.element.onscroll=this.ontouch.bind(this),this.layoutParams.width=t.clientWidth,this.layoutParams.height=t.clientHeight,a.width=t.clientWidth,a.height=t.clientHeight,this.attachRender(new n(t,e)),this.setInfo(0,0,t.clientWidth,t.clientHeight)},e.prototype.ontouch=function(t){var t=t||window.event,e=new s(0,0,0);switch(t.type){case"touchstart":e=new s(t.touches[0].clientX,t.touches[0].clientY,s.ACTION_DOWN);break;case"touchend":e=new s(t.changedTouches[0].clientX,t.changedTouches[0].clientY,s.ACTION_UP);break;case"touchcancel":e=new s(t.changedTouches[0].clientX,t.changedTouches[0].clientY,s.ACTION_CANCEL);break;case"touchmove":e=new s(t.touches[0].clientX,t.touches[0].clientY,s.ACTION_MOVE);break;case"mousedown":e=new s(t.clientX,t.clientY,s.ACTION_MOUSE_DOWN);break;case"mousemove":e=new s(t.clientX,t.clientY,s.ACTION_MOUSE_MOVE);break;case"mouseup":e=new s(t.clientX,t.clientY,s.ACTION_MOUSE_UP);break;case"mouseout":e=new s(t.clientX,t.clientY,s.ACTION_MOUSE_OUT);break;case"mouseover":e=new s(t.clientX,t.clientY,s.ACTION_MOUSE_OVER);break;case"click":e=new s(t.clientX,t.clientY,s.ACTION_CLICK);break;case"scroll":e=new s(t.clientX,t.clientY,s.ACTION_SCROLL);break;case"mousewheel":(e=new s(t.clientX,t.clientY,s.ACTION_MOUSE_WHEEL)).deltaX=t.deltaX,e.deltaY=t.deltaY}e.element=this.element;var i=this.element.getBoundingClientRect();e.x=e.x-i.left,e.y=e.y-i.top,this.sendEvent(e)},e.prototype.sendEvent=function(t){t.action>=s.ACTION_MOUSE_DOWN?this.dispatchMouseEvent(t):this.dispatchTouchEvent(t)},e}(e.FrameLayout);e.RootView=h}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=t.widget.RootView,n=function(){function t(t,e){this.stack=new Array,this.rootView=new i(null),this.rootView.attachElement(e,t)}return t.prototype.sendStartActivity=function(t,e,i,n){var o=this.createActivity(t.getClass()),r=this.stack[this.stack.length-1];r&&r.onPause.call(r),this.rootView.removeAllViews(),this.stack.push(o),o.attatchRootView.call(o,this.rootView),o.onResume.call(o),o.onCreate.call(o,e),this.rootView.invalidate(!0)},t.prototype.createActivity=function(t){return new t(this)},t.prototype.getCurrentActivity=function(){return this.stack[this.stack.length-1]},t}();e.ActivityManager=n}(t.app||(t.app={}))}(android||(android={}));!function(t){var e=t.app.ActivityManager,i=t.graphics.RenderType,n=t.app.Intent,o=t.device.Device,r=t.view.event.MotionEvent,s=function(){function s(){this.loadConfig(),this.element=document.getElementById(this.getRootElement()),this.element.innerHTML="","parent"===this.getFill()&&(o.width=this.element.clientWidth,o.height=this.element.clientHeight);var t=i.Canvas;t="canvas"==this.getRenderType()?i.Canvas:i.Svg,this.activityManager=new e(t,this.element)}return s.prototype.ontouch=function(t){t.preventDefault(),t.stopPropagation();var t=t||window.event,e=new r(0,0,0);switch(t.type){case"touchstart":e=new r(t.touches[0].clientX,t.touches[0].clientY,r.ACTION_DOWN);break;case"touchend":e=new r(t.changedTouches[0].clientX,t.changedTouches[0].clientY,r.ACTION_UP);break;case"touchcancel":e=new r(t.changedTouches[0].clientX,t.changedTouches[0].clientY,r.ACTION_CANCEL);break;case"touchmove":e=new r(t.touches[0].clientX,t.touches[0].clientY,r.ACTION_MOVE);break;case"mousedown":e=new r(t.clientX,t.clientY,r.ACTION_MOUSE_DOWN);break;case"mousemove":e=new r(t.clientX,t.clientY,r.ACTION_MOUSE_MOVE);break;case"mouseup":e=new r(t.clientX,t.clientY,r.ACTION_MOUSE_UP);break;case"mouseout":e=new r(t.clientX,t.clientY,r.ACTION_MOUSE_OUT);break;case"mouseover":e=new r(t.clientX,t.clientY,r.ACTION_MOUSE_OVER);break;case"click":e=new r(t.clientX,t.clientY,r.ACTION_CLICK)}e.element=this.element;var i=this.element.getClientRects();e.x=e.x-i[0].left,e.y=e.y-i[0].top},s.prototype.start=function(){var e=new n;e.setClass(null,this.getLaunchActivity());var i=new t.app.Bundle;i.putDefault(this.getLaunchParams()),this.activityManager.sendStartActivity(e,i,0,0)},s.prototype.getLaunchActivity=function(){return this.config.launchActivity.target},s.prototype.getLaunchParams=function(){return this.config.launchActivity.params},s.prototype.getRootElement=function(){return this.config.rootcontainer.target},s.prototype.getRenderType=function(){return this.config.rendertype?this.config.rendertype.target:"svg"},s.prototype.getFill=function(){return this.config.fill},s.prototype.loadConfig=function(){this.config=window.mainfest.config},s.prototype.getCurrentActivity=function(){return this.activityManager.getCurrentActivity()},s}();t.StartUp=s}(android||(android={}));!function(t){!function(t){var e=function(){function t(){}return t.prototype.onChanged=function(){},t.prototype.onInvalidated=function(){},t}();t.DataSetObserver=e}(t.database||(t.database={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(){this.mObservers=new Array}return t.prototype.registerObserver=function(t){if(!t)throw"The observer is null or undefine";if(this.mObservers.indexOf(t)>-1)throw"Observer "+t+" is already registered ";this.mObservers.push(t)},t.prototype.unregisterObserver=function(t){if(!t)throw"The observer is null or undefine";var e=this.mObservers.indexOf(t);if(-1===e)throw"Observer "+t+" was not registered ";this.mObservers.splice(e,1)},t.prototype.unregisterAll=function(){this.mObservers.length=0},t}();t.Observable=e;var i=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.notifyChanged=function(){for(var t=this.mObservers.length-1;t>=0;t--)this.mObservers[t].onChanged()},e.prototype.notifyInvalidated=function(){for(var t=this.mObservers.length-1;t>=0;t--)this.mObservers[t].onInvalidated()},e}(e);t.DataSetObservable=i}(t.database||(t.database={}))}(android||(android={}));!function(t){!function(t){var e=function(){return function(){}}();t.Adapter=e}(t.adapter||(t.adapter={}))}(android||(android={}));!function(t){!function(e){var i=t.database.DataSetObservable,n=function(){function t(){this.mDataSetObservable=new i,this.mViewCache=new Array,this.mShouldCache=!1}return t.prototype.XBaseAdapter=function(){},t.prototype.registerDataSetObserver=function(t){this.mDataSetObservable.registerObserver(t)},t.prototype.unregisterDataSetObserver=function(t){this.mDataSetObservable.unregisterObserver(t)},t.prototype.notifyDataSetChanged=function(){this.mDataSetObservable.notifyChanged()},t.prototype.notifyDataSetInvalidated=function(){this.mDataSetObservable.notifyInvalidated()},t.prototype.setCacheEnable=function(t){this.mShouldCache=t,this.mShouldCache||(this.mViewCache.length=0)},t.prototype.initItem=function(t,e){var i=null;if(this.mShouldCache){for(var n=0;n<this.mViewCache.length;++n){var r=this.mViewCache[n];if(null!=r&&r.position==t&&null!=(i=r.view))return this.instantiateItem(t,e,i)}null==i&&(i=this.instantiateItem(t,e,null)),this.mViewCache.push(new o(i,t))}return null==i&&(i=this.instantiateItem(t,e,null)),i},t.prototype.beginUpdata=function(){},t.prototype.finishUpdata=function(){},t}();e.ViewPageAdapter=n;var o=function(){return function(t,e){this.view=t,this.position=e}}();e.ViewInfo=o}(t.adapter||(t.adapter={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(){this.map={}}return t.prototype.put=function(t,e){this.map[t]=e},t.prototype.putDefault=function(t){this.map.default=t},t.prototype.getDefault=function(){return this.map.default},t}();t.Bundle=e}(t.app||(t.app={}))}(android||(android={}));!function(t){var e=function(){function t(){}return t.assert=function(t,e){if(void 0===t&&(t=!1),!t)throw e+"\n"+(new Error).stack},t.log=function(t){console.log(t)},t}();t.Debug=e}(android||(android={}));!function(t){!function(t){!function(t){t[t.LEFT=0]="LEFT",t[t.CENTER=1]="CENTER",t[t.RIGHT=2]="RIGHT"}(t.Align||(t.Align={}))}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(t){var e=function(){return function(t,e){this.position=t,this.element=e}}();t.AlignElment=e}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(e){"use strict";var i=t.graphics.Size,n=t.graphics.Point,o=function(){function t(t){this._element=t,this._create()}return Object.defineProperty(t.prototype,"alpha",{set:function(t){this._canvas2d.globalAlpha=t},enumerable:!0,configurable:!0}),t.prototype.clearRect=function(t,e,i,n){this._canvas2d.clearRect(t,e,i,n)},t.prototype.beginRender=function(){this._canvas2d.clearRect(0,0,this._canvas.width,this._canvas.height)},t.prototype.endRender=function(){},t.prototype.save=function(){this._canvas2d.save()},t.prototype.restore=function(){this._canvas2d.restore()},t.prototype.getImageData=function(t,e,i,n){return this._canvas2d.getImageData(t,e,i,n)},t.prototype.putImageData=function(t,e,i,n,o,r,s){this._canvas2d.putImageData(t,e,i,n,o,r,s)},t.prototype.clip=function(t){this._canvas2d.beginPath(),this._canvas2d.rect(t.left,t.top,t.width,t.height),this._canvas2d.clip()},t.prototype.setViewportSize=function(t,e){this._canvas.width=2*t,this._canvas.height=2*e,this._canvas.style.width=t+"px",this._canvas.style.height=e+"px",this._canvas2d.scale(2,2)},Object.defineProperty(t.prototype,"element",{get:function(){return this._canvas},enumerable:!0,configurable:!0}),t.prototype.drawEllipse=function(t,e,i,n,o){},t.prototype._applyStyle=function(t){null!=t&&(t.background instanceof e.Gradient||"string"==typeof t.background&&(this._canvas2d.fillStyle=t.background),this._applyStrokeStyle(t.strokeStyle))},t.prototype._applyStrokeStyle=function(t){null!=t&&(null!=t.strokeColor&&(this._canvas2d.strokeStyle=t.strokeColor),null==t.strokeWidth||isNaN(t.strokeWidth)||(this._canvas2d.lineWidth=t.strokeWidth),null!=t.dash&&this._canvas2d.setLineDash(t.dash),null!=t.dashOffset&&(this._canvas2d.lineDashOffset=t.dashOffset))},t.prototype._applyFont=function(t){null!=t&&(null!=t.fontColor&&(this._canvas2d.fillStyle=t.fontColor),null!=t.fontSize&&(this._canvas2d.font=t.fontSize+"px "),null!=t.fontFamily&&(this._canvas2d.font+=t.fontFamily))},t.prototype.drawRect=function(t,e,i,n,o,r){this._canvas2d.save(),this._applyStyle(o),r?this._canvas2d.fillRect(t,e,i,n):this._canvas2d.strokeRect(t,e,i,n),o.strokeStyle,this._canvas2d.restore()},t.prototype.drawLine=function(t,e,i,n,o){this._canvas2d.beginPath(),this._canvas2d.moveTo(t,e),this._canvas2d.lineTo(i,n),this._canvas2d.strokeStyle=o.strokeColor,this._canvas2d.lineWidth=o.strokeWidth,this._canvas2d.stroke()},t.prototype.drawLines=function(t,e,i){if(null!==t&&null!==e&&t.length===e.length&&t.length>0){this._canvas2d.save(),this._canvas2d.beginPath(),this._applyStrokeStyle(i),this._canvas2d.moveTo(t[0],e[0]);for(var n=1;n<t.length;++n)this._canvas2d.lineTo(t[n],e[n]);this._canvas2d.stroke(),this._canvas2d.closePath(),this._canvas2d.restore()}},t.prototype.drawPolygon=function(t,e,i){this._canvas2d.save(),this._applyStyle(i),this._canvas2d.beginPath(),this._canvas2d.moveTo(t[0],e[0]);for(var n=1;n<t.length;++n)this._canvas2d.lineTo(t[n],e[n]);this._canvas2d.closePath(),this._canvas2d.fill(),null!=i.strokeStyle&&this._canvas2d.stroke(),this._canvas2d.restore()},t.prototype.drawPie=function(t,e,i,n,o,r){this._canvas2d.save(),this._applyStyle(r),this._canvas2d.beginPath(),this._canvas2d.moveTo(t,e),this._canvas2d.arc(t,e,i,n,n+o),this._canvas2d.lineTo(t,e),this._canvas2d.closePath(),this._canvas2d.fill(),this._canvas2d.rotate(n),this._canvas2d.restore()},t.prototype.drawDonut=function(t,e,i,o,r,s,a){var h=r+s,u=new n(t,e);u.x+=o*Math.cos(r),u.y+=o*Math.sin(r);var c=new n(t,e);c.x+=o*Math.cos(h),c.y+=o*Math.sin(h),this._canvas2d.save(),this._canvas2d.beginPath(),this._applyStyle(a),this._canvas2d.moveTo(u.x,u.y),this._canvas2d.arc(t,e,i,r,h,!1),this._canvas2d.lineTo(c.x,c.y),this._canvas2d.arc(t,e,o,h,r,!0),this._canvas2d.fill(),this._canvas2d.restore()},t.prototype.drawString=function(t,e,i){this._canvas2d.save(),this._applyFont(i),this._canvas2d.fillText(t,e.x,e.y),this._canvas2d.restore()},t.prototype.drawStringRotated=function(t,e,i,n,o){this._canvas2d.save(),this._canvas2d.textBaseline="bottom",this._canvas2d.translate(i.x,i.y),this._canvas2d.rotate(Math.PI/180*n),this._canvas2d.translate(-i.x,-i.y),this._applyFont(o),this._canvas2d.fillText(t,e.x,e.y),this._canvas2d.restore()},t.prototype.measureString=function(t,e,n){void 0===n&&(n=0);var o=new i(0,0);this._canvas2d.font=e.fontSize+"px "+e.fontFamily;var r=this._canvas2d.measureText(t);return o.width=r.width,o.height=e.fontSize,o},t.prototype.drawImage=function(t,e,i,n,o){},t.prototype._create=function(){this._canvas=document.createElement("canvas"),this._element.appendChild(this._canvas),this._canvas2d=this._canvas.getContext("2d")},t.prototype.moveTo=function(t,e){this._canvas2d.moveTo(t,e)},t.prototype.scale=function(t,e){this._canvas2d.scale(t,e)},t.prototype.rotate=function(t){this._canvas2d.rotate(t)},t.prototype.translate=function(t,e){this._canvas2d.translate(t,e)},t}();e.CanvasRenderEngine=o}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(e){"use strict";var i=t.graphics.Size,n=t.graphics.Point,o=function(){function t(e){this._strokeWidth=1,this._fontSize=null,this._fontFamily=null,this.alpha=1,this._element=e,this._create(),this._element.appendChild(this._svg),void 0===t._isff&&(t._isff=navigator.userAgent.toLowerCase().indexOf("firefox")>=0)}return t.prototype.save=function(){},t.prototype.restore=function(){},t.prototype.clip=function(){},t.prototype.beginRender=function(){for(;this._svg.firstChild;)this._svg.removeChild(this._svg.firstChild);this._svg.appendChild(this._textGroup)},t.prototype.endRender=function(){this._textGroup.parentNode&&this._svg.removeChild(this._textGroup)},t.prototype.setViewportSize=function(t,e){this._svg.setAttribute("width",t.toString()),this._svg.setAttribute("height",e.toString())},Object.defineProperty(t.prototype,"element",{get:function(){return this._svg},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fill",{get:function(){return this._fill},set:function(t){this._fill=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fontSize",{get:function(){return this._fontSize},set:function(t){this._fontSize=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fontFamily",{get:function(){return this._fontFamily},set:function(t){this._fontFamily=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stroke",{get:function(){return this._stroke},set:function(t){this._stroke=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"strokeWidth",{get:function(){return this._strokeWidth},set:function(t){this._strokeWidth=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"textFill",{get:function(){return this._textFill},set:function(t){this._textFill=t},enumerable:!0,configurable:!0}),t.prototype.addClipRect=function(e,i){if(e&&i){var n=document.createElementNS(t.svgNS,"clipPath"),o=document.createElementNS(t.svgNS,"rect");o.setAttribute("x",(e.left-1).toFixed()),o.setAttribute("y",(e.top-1).toFixed()),o.setAttribute("width",(e.width+2).toFixed()),o.setAttribute("height",(e.height+2).toFixed()),n.appendChild(o),n.setAttribute("id",i),this._svg.appendChild(n)}},t.prototype.drawEllipse=function(e,i,n,o,r,s){var a=document.createElementNS(t.svgNS,"ellipse");return a.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&a.setAttribute("stroke-width",this._strokeWidth.toString()),a.setAttribute("fill",this._fill),a.setAttribute("cx",e.toFixed(1)),a.setAttribute("cy",i.toFixed(1)),a.setAttribute("rx",n.toFixed(1)),a.setAttribute("ry",o.toFixed(1)),r&&a.setAttribute("class",r),this._applyStyle(a,s),this._appendChild(a),a},t.prototype.drawRect=function(e,i,n,o,r,s,a){var h=document.createElementNS(t.svgNS,"rect");return h.setAttribute("fill",this._fill),h.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&h.setAttribute("stroke-width",this._strokeWidth.toString()),h.setAttribute("x",e.toFixed(1)),h.setAttribute("y",i.toFixed(1)),n>0&&n<.05?h.setAttribute("width","0.1"):h.setAttribute("width",n.toFixed(1)),o>0&&o<.05?h.setAttribute("height","0.1"):h.setAttribute("height",o.toFixed(1)),a&&h.setAttribute("clip-path","url(#"+a+")"),r&&h.setAttribute("class",r),this._applyStyle(h,s),this._appendChild(h),h},t.prototype.drawLine=function(t,e,i,n,o){this._drawLine(t,e,i,n,null,{stroke:o.strokeColor,"stroke-width":o.strokeWidth})},t.prototype._drawLine=function(e,i,n,o,r,s){var a=document.createElementNS(t.svgNS,"line");return a.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&a.setAttribute("stroke-width",this._strokeWidth.toString()),a.setAttribute("x1",e.toFixed(1)),a.setAttribute("x2",n.toFixed(1)),a.setAttribute("y1",i.toFixed(1)),a.setAttribute("y2",o.toFixed(1)),r&&a.setAttribute("class",r),this._applyStyle(a,s),this._appendChild(a),a},t.prototype.drawLines=function(e,i,n,o,r){if(e&&i){var s=Math.min(e.length,i.length);if(s>0){var a=document.createElementNS(t.svgNS,"polyline");a.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&a.setAttribute("stroke-width",this._strokeWidth.toString()),a.setAttribute("fill","none");for(var h="",u=0;u<s;u++)h+=e[u].toFixed(1)+","+i[u].toFixed(1)+" ";return a.setAttribute("points",h),n&&a.setAttribute("class",n),r&&a.setAttribute("clip-path","url(#"+r+")"),this._applyStyle(a,o),this._appendChild(a),a}}return null},t.prototype.drawPolygon=function(e,i,n,o,r){if(e&&i){var s=Math.min(e.length,i.length);if(s>0){var a=document.createElementNS(t.svgNS,"polygon");a.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&a.setAttribute("stroke-width",this._strokeWidth.toString()),a.setAttribute("fill",this._fill),a.setAttribute("opacity",this.alpha+"");for(var h="",u=0;u<s;u++)h+=e[u].toFixed(1)+","+i[u].toFixed(1)+" ";return a.setAttribute("points",h),n&&a.setAttribute("class",n),r&&a.setAttribute("clip-path","url(#"+r+")"),this._applyStyle(a,o),this._appendChild(a),a}}return null},t.prototype.drawPie=function(e,i,o,r,s,a,h,u){if(s>=2*Math.PI)return this.drawEllipse(e,i,o,o,a,h);var c=document.createElementNS(t.svgNS,"path");c.setAttribute("fill",this._fill),c.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&c.setAttribute("stroke-width",this._strokeWidth.toString());var d=new n(e,i);d.x+=o*Math.cos(r),d.y+=o*Math.sin(r);var l=r+s,p=new n(e,i);p.x+=o*Math.cos(l),p.y+=o*Math.sin(l);var f=" 0 0,1 ";Math.abs(s)>Math.PI&&(f=" 0 1,1 ");var g="M "+d.x.toFixed(1)+","+d.y.toFixed(1);return g+=" A "+o.toFixed(1)+","+o.toFixed(1)+f,g+=p.x.toFixed(1)+","+p.y.toFixed(1),g+=" L "+e.toFixed(1)+","+i.toFixed(1)+" z",c.setAttribute("d",g),u&&c.setAttribute("clip-path","url(#"+u+")"),a&&c.setAttribute("class",a),this._applyStyle(c,h),this._appendChild(c),c},t.prototype.drawDonut=function(e,i,o,r,s,a,h,u,c){var d=!1;s+a>=2*Math.PI&&(d=!0,a=2*Math.PI-s-.01);var l=document.createElementNS(t.svgNS,"path");l.setAttribute("fill",this._fill),l.setAttribute("stroke",this._stroke),null!==this._strokeWidth&&l.setAttribute("stroke-width",this._strokeWidth.toString());var p=new n(e,i);p.x+=o*Math.cos(s),p.y+=o*Math.sin(s);var f=s+a,g=new n(e,i);g.x+=o*Math.cos(f),g.y+=o*Math.sin(f);var m=new n(e,i);m.x+=r*Math.cos(f),m.y+=r*Math.sin(f);var y=new n(e,i);y.x+=r*Math.cos(s),y.y+=r*Math.sin(s);var v=" 0 0,1 ",_=" 0 0,0 ";Math.abs(a)>Math.PI&&(v=" 0 1,1 ",_=" 0 1,0 ");var w="M "+p.x.toFixed(3)+","+p.y.toFixed(3);return w+=" A "+o.toFixed(3)+","+o.toFixed(3)+v,w+=g.x.toFixed(3)+","+g.y.toFixed(3),w+=d?" M "+m.x.toFixed(3)+","+m.y.toFixed(3):" L "+m.x.toFixed(3)+","+m.y.toFixed(3),w+=" A "+r.toFixed(3)+","+r.toFixed(3)+_,w+=y.x.toFixed(3)+","+y.y.toFixed(3),d||(w+=" z"),l.setAttribute("d",w),c&&l.setAttribute("clip-path","url(#"+c+")"),h&&l.setAttribute("class",h),this._applyStyle(l,u),this._appendChild(l),l},t.prototype.drawString=function(t,e,i,n){var o=this._createText(e,t);i&&o.setAttribute("class",i),this._applyStyle(o,n),this._appendChild(o);var r=this._getBBox(o);return o.setAttribute("y",(e.y-(r.y+r.height-e.y)).toFixed(1)),o},t.prototype.drawStringRotated=function(e,i,n,o,r,s){var a=this._createText(i,e);r&&a.setAttribute("class",r),this._applyStyle(a,s);var h=document.createElementNS(t.svgNS,"g");h.setAttribute("transform","rotate("+o.toFixed(1)+","+n.x.toFixed(1)+","+n.y.toFixed(1)+")"),h.appendChild(a),this._appendChild(h);var u=this._getBBox(a);return a.setAttribute("y",(i.y-(u.y+u.height-i.y)).toFixed(1)),a},t.prototype.measureString=function(t,e){return this._measureString(t,null,null,{"font-size":e.fontSize,"font-family":e.fontFamily})},t.prototype._measureString=function(t,e,n,o){var r=new i(0,0);this._fontSize&&this._text.setAttribute("font-size",this._fontSize),this._fontFamily&&this._text.setAttribute("font-family",this._fontFamily),e&&this._text.setAttribute("class",e),n&&this._textGroup.setAttribute("class",n),this._applyStyle(this._text,o),this._setText(this._text,t);var s=this._getBBox(this._text);if(r.width=s.width,r.height=s.height-2,this._text.removeAttribute("font-size"),this._text.removeAttribute("font-family"),this._text.removeAttribute("class"),o)for(var a in o)this._text.removeAttribute(this._deCase(a));return this._textGroup.removeAttribute("class"),this._text.textContent=null,r},t.prototype.startGroup=function(e,i,n){void 0===n&&(n=!1);var o=document.createElementNS(t.svgNS,"g");return e&&o.setAttribute("class",e),i&&o.setAttribute("clip-path","url(#"+i+")"),this._appendChild(o),n&&o.transform.baseVal.appendItem(this._svg.createSVGTransform()),this._group=o,o},t.prototype.endGroup=function(){if(this._group){var t=this._group.parentNode;t==this._svg?this._group=null:this._group=t}},t.prototype.drawImage=function(e,i,n,o,r){var s=document.createElementNS(t.svgNS,"image");return s.setAttributeNS(t.xlinkNS,"href",e),s.setAttribute("x",i.toFixed(1)),s.setAttribute("y",n.toFixed(1)),s.setAttribute("width",o.toFixed(1)),s.setAttribute("height",r.toFixed(1)),this._appendChild(s),s},t.prototype._appendChild=function(t){var e=this._group;e||(e=this._svg),e.appendChild(t)},t.prototype._create=function(){this._svg=document.createElementNS(t.svgNS,"svg"),this._defs=document.createElementNS(t.svgNS,"defs"),this._svg.appendChild(this._defs),this._text=this._createText(new n(-1e3,-1e3),""),this._textGroup=document.createElementNS(t.svgNS,"g"),this._textGroup.appendChild(this._text),this._svg.appendChild(this._textGroup)},t.prototype._setText=function(t,e){var i=e?e.toString():null;if(i&&i.indexOf("tspan")>=0)try{t.textContent=null;for(var n='<svg xmlns="http://www.w3.org/2000/svg">'+i+"</svg>",o=(new DOMParser).parseFromString(n,"text/xml").documentElement.firstChild;o;)t.appendChild(t.ownerDocument.importNode(o,!0)),o=o.nextSibling}catch(t){throw new Error("Error parsing XML string.")}else t.textContent=i},t.prototype._createText=function(e,i){var n=document.createElementNS(t.svgNS,"text");return this._setText(n,i),n.setAttribute("fill",this._textFill),n.setAttribute("x",e.x.toFixed(1)),n.setAttribute("y",e.y.toFixed(1)),this._fontSize&&n.setAttribute("font-size",this._fontSize),this._fontFamily&&n.setAttribute("font-family",this._fontFamily),n},t.prototype._applyStyle=function(t,e){if(e)for(var i in e)t.setAttribute(this._deCase(i),e[i])},t.prototype._deCase=function(t){return t.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()})},t.prototype._getBBox=function(e){if(!t._isff)return e.getBBox();try{return e.getBBox()}catch(t){return{x:0,y:0,width:0,height:0}}},t}();o.svgNS="http://www.w3.org/2000/svg",o.xlinkNS="http://www.w3.org/1999/xlink",e.SvgRenderEngine=o}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(t,e){this.canvas=t,this.font=e}return t.prototype.measureString=function(t){return this.canvas.measureString(t,this.font)},t}();t.TextPaint=e}(t.graphics||(t.graphics={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(){this._array=[]}return t.prototype.add=function(t){this._array.push(t)},t.prototype.remove=function(t){if("number"==typeof t)this._array.splice(t);else{var e=this._array.indexOf(t);e>0&&this._array.splice(e,1)}},t.prototype.clear=function(){this._array.length=0},t.prototype.size=function(){return this._array.length},t.prototype.get=function(t){return this._array[t]},t}();t.ArrayList=e}(t.util||(t.util={}))}(android||(android={}));!function(t){!function(t){var e=function(){function t(t){this.what=0,this.what=t}return t.obtain=function(e){return new t(e)},t}();t.Message=e}(t.util||(t.util={}))}(android||(android={}));!function(t){!function(t){var e=function(){function e(){this._hanlderMap={},this._queue=[]}return e.prototype.handleMessage=function(t){},e.prototype.sendMessage=function(t){return this.sendMessageDelayed(t,0)},e.prototype.sendMessageDelayed=function(t,e){return this.sendMessageAtTime(t,Date.now()+e)},e.prototype.sendMessageAtTime=function(t,e){var i=this;return this._hanlderMap[t.what]=setTimeout(function(){i.handleMessage(t)},e-Date.now()),!0},e.prototype.removeMessages=function(t){clearTimeout(this._hanlderMap[t])},e.prototype.obtainMessage=function(e){return t.Message.obtain(e)},e}();t.Handler=e}(t.util||(t.util={}))}(android||(android={}));!function(t){!function(e){var i=t.view.View,n=t.view.MeasureSpec;!function(t){t[t.MATRIX=0]="MATRIX",t[t.FIT_XY=1]="FIT_XY",t[t.FIT_START=2]="FIT_START",t[t.FIT_CENTER=3]="FIT_CENTER",t[t.FIT_END=4]="FIT_END",t[t.CENTER=5]="CENTER",t[t.CENTER_CROP=6]="CENTER_CROP",t[t.CENTER_INSIDE=7]="CENTER_INSIDE"}(e.ScaleType||(e.ScaleType={}));var o=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.onMeasure=function(t,e,i){return this.setMeasuredDimension(new n,new n),null},e.prototype.onDraw=function(t){},e}(i);e.ImageView=o}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Gravity,n=t.view.ViewGroup,o=t.graphics.Point,r=t.view.MeasureSpec,s=t.graphics.Orientation,a=t.view.LayoutParams,h=function(t){function e(){var e=t.apply(this,arguments)||this;return e._orientation=s.Horizontal,e}return __extends(e,t),e.prototype.setOrientation=function(t){this._orientation=t},e.prototype.getOrientation=function(){return this._orientation},e.prototype.onMeasure=function(t,e,i){return this._orientation===s.Horizontal?this.measureHorizontal(t,e,i):this.measureVertical(t,e,i)},e.prototype.measureHorizontal=function(t,e,i){for(var n,o=0;o<this.children.length;++o){var s=this.children[o],h=s.layoutParams,u=h.width,c=h.height;h.heightMode===a.MATCH_PARENT&&(c=e.value),h.widthMode===a.MATCH_PARENT&&(u=t.value);var d=s.onMeasure(new r(u,h.widthMode),new r(c,h.heightMode),i);n?(n.width+=d.width,n.height<d.height&&(n.height=d.height)):n=d.clone()}return this.layoutParams.widthMode===a.EXACTLY?n.width=this.layoutParams.width:this.layoutParams.widthMode===a.MATCH_PARENT&&(n.width=t.getMeasureValue()),this.layoutParams.heightMode===a.EXACTLY?n.height=this.layoutParams.height:this.layoutParams.heightMode===a.MATCH_PARENT&&(n.height=e.getMeasureValue()),this.setMeasuredDimension(new r(n.width,a.EXACTLY),new r(n.height,a.EXACTLY)),n},e.prototype.measureVertical=function(t,e,i){for(var n,o=0;o<this.children.length;++o){var s=this.children[o],h=s.layoutParams,u=h.width,c=h.height;h.heightMode===a.MATCH_PARENT&&(c=e.value),h.widthMode===a.MATCH_PARENT&&(u=t.value);var d=s.onMeasure(new r(u,h.widthMode),new r(c,h.heightMode),i);n?(n.height+=d.height,n.width<d.width&&(n.width=d.width)):n=d.clone()}return this.layoutParams.widthMode===a.EXACTLY?n.width=this.layoutParams.width:this.layoutParams.widthMode===a.MATCH_PARENT&&(n.width=t.getMeasureValue()),this.layoutParams.heightMode===a.EXACTLY?n.height=this.layoutParams.height:this.layoutParams.heightMode===a.MATCH_PARENT&&(n.height=e.getMeasureValue()),this.setMeasuredDimension(new r(n.width,a.EXACTLY),new r(n.height,a.EXACTLY)),n},e.prototype.onLayout=function(e,i,n,o,r){t.prototype.onLayout.call(this,e,i,n,o,r);var a=this.layoutInfo.innerrect;this._orientation===s.Horizontal?this.layoutHorizontal(a.left,a.top,a.right,a.bottom,r):this.layoutVertical(a.left,a.top,a.right,a.bottom,r)},e.prototype.layoutHorizontal=function(t,e,n,r,s){for(var a,h,u=new o(t,e),c=this.children.length,d=0,l=0;l<c;++l)h=(a=this.children[l]).layoutParams.margin,d+=a.width+(h.marginLeft+h.marginRight);a=null,h=null;for(d<n-t&&(n-t-d)/2,l=0;l<c;++l){switch(a=this.children[l],h=a.layoutParams.margin,a.gravity){case i.Left:case i.Auto:case i.Right:break;case i.Top:u.y=e;break;case i.Bottom:u.y=r-a.height-h.marginBottom;break;case i.Center:u.y=e+(r-e-a.height>0?r-e-a.height:0)/2}u.offset(h.marginLeft>0?h.marginLeft:0,h.marginTop>0?h.marginTop:0),a.onLayout(u.x,u.y,u.x+a.width,u.y+a.height,s),u.offset(a.width+(h.marginRight>0?h.marginRight:0),0)}},e.prototype.layoutVertical=function(t,e,n,r,s){for(var a,h,u=new o(t,e),c=this.children.length,d=0,l=0;l<c;++l)h=(a=this.children[l]).layoutParams.margin,d+=a.height+(h.marginTop+h.marginBottom);a=null,h=null;for(d<r-e&&(r-e-d)/2,l=0;l<c;++l){switch(a=this.children[l],h=a.layoutParams.margin,a.gravity){case i.Left:case i.Auto:u.x=t;break;case i.Right:u.x=n-a.width-h.marginRight;break;case i.Top:case i.Bottom:break;case i.Center:u.x=t+(n-t-a.width>0?n-t-a.width:0)/2}u.offset(h.marginLeft>0?h.marginLeft:0,h.marginTop>0?h.marginTop:0),a.onLayout(u.x,u.y,u.x+a.width,u.y+a.height,s),u.offset(0,a.height+(h.marginBottom>0?h.marginBottom:0))}},e}(n);e.LinearLayout=h}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=function(t){function e(e){return t.call(this,e)||this}return __extends(e,t),e.prototype.setAdapter=function(t){},e}(t.view.ViewGroup);e.ListView=i}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Point,n=t.view.event.MotionEvent,o=function(e){function o(t){return e.call(this,t)||this}return __extends(o,e),o.prototype.onMeasure=function(i,n,o){return t.Debug.assert(1===this.children.length,"There is only one view that can be added to the scroll layout "),e.prototype.onMeasure.call(this,i,n,o)},o.prototype.onLayout=function(t,i,n,o,r){e.prototype.onLayout.call(this,t,i,n,o,r)},o.prototype.onInterceptMouseEvent=function(t){return!0},o.prototype.onMouseEvent=function(t){console.log("onMouseEvent "+t.toString());var e=new i(t.x,t.y);switch(t.action){case n.ACTION_MOUSE_WHEEL:if(null!=this.startPt&&this.children[0].height>this.width&&null!=t.deltaY&&0!=t.deltaY){var o=-t.deltaY;if(o>0&&this.children[0].top>=this.top)return;if(o<0&&this.children[0].bottom<=this.bottom)return;this.children[0].offset(0,o),this.requestLayout(),console.log("top"+this.children[0].top+" , bottom  "+this.children[0].bottom)}this.startPt=e.clone();break;case n.ACTION_MOUSE_OUT:this.startPt=null}return!0},o}(e.FrameLayout);e.ScrollLayout=o}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(t){"use strict";var e=function(){return function(){}}();t.Scroller=e;var i=function(){return function(){}}();t.FastScroller=i}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Size,n=t.view.View,o=t.view.MeasureSpec,r=t.graphics.Font,s=t.view.LayoutInfo,a=t.view.LayoutParams;e.Ellipsize||(e.Ellipsize={});var h=function(t){function e(){return t.apply(this,arguments)||this}return __extends(e,t),e.prototype.onDraw=function(e){t.prototype.onDraw.call(this,e),e.drawText(this.text,this.layoutInfo.innerrect.startPoint,this.font)},e.prototype.setText=function(t){this.text=t,this.invalidate(!1)},e.prototype.setFont=function(t){this.font=t},Object.defineProperty(e.prototype,"ellipsize",{get:function(){return this._ellipsize},set:function(t){this._ellipsize=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxWidth",{get:function(){return this._maxWidth},set:function(t){this._maxWidth=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"linespace",{get:function(){return this._linespace},set:function(t){this._linespace=t},enumerable:!0,configurable:!0}),e.prototype.onMeasure=function(t,e,n){this.font||(this.font=new r(16,"","white")),this._layoutInfo=new s(0,0,0,0,this.padding,0);var h=this.layoutParams.width,u=this.layoutParams.height,c=new i(h,u),d=this.layoutParams.widthMode,l=this.layoutParams.heightMode,p=n.measureString(this.text,this.font);return d===a.MATCH_PARENT?c.width=t.value:d===a.WRAP_CONTENT&&(c.width=p.width>this._maxWidth?this._maxWidth:p.width),l===a.MATCH_PARENT?c.height=e.value:l===a.WRAP_CONTENT&&(c.height=p.height),this.setMeasuredDimension(new o(c.width,a.EXACTLY),new o(c.height,a.EXACTLY)),c},e}(n);e.TextView=h}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(e){var i=t.graphics.Size,n=t.view.ViewGroup,o=t.view.MeasureSpec,r=t.view.LayoutParams,s=t.util.ArrayList,a=t.database.DataSetObserver,h=t.util.Handler,u=t.util.Log,c=t.view.event.MotionEvent,d=t.device.Device,l=10,p=12,f=function(t){function e(e){var i=t.call(this,e)||this;return i.mPosition=0,i.mViewStack=new s,i.mIndex=0,i.mSize=0,i.mAnimationState=0,i.mScale=0,i.mIsScaled=!1,i.mMin_speed=l,i.min_touch=p,i.mLastAnimationTime=0,i.mCurrentAnimationTime=0,i.mSpeed=130,i.mAnimationEnd=!0,i.mCenterX=0,i.mCenterY=0,i.direction=1,i.init(),i}return __extends(e,t),e.prototype.init=function(){var t=this;this.getContext();this.mMin_speed=l*d.density,this.mLayoutParams=new r(r.MATCH_PARENT,r.MATCH_PARENT),this.min_touch=3,this.mHandler=new h,this.mHandler.handleMessage=function(e){switch(e.what){case 10001:t.doLeftOrBounceAnimation();break;case 10002:t.doRightOrBounceAnimation()}}},e.prototype.setAreaTouchListener=function(t){this.mAreaTouchListener=t},e.prototype.onInterceptTouchEvent=function(t){var e=t.action,i=t.x,n=t.y;switch(e){case c.ACTION_DOWN:return this.oldx=i,this.oldy=n,this.downX=i,!!this.mAreaTouchListener;case c.ACTION_MOVE:return n-this.oldy!=0&&(Math.abs(i-this.oldx)/Math.abs(n-this.oldy)>2&&Math.abs(i-this.downX)>this.min_touch)}return!0},e.prototype.onTouchEvent=function(t){if(!this.mAnimationEnd)return!0;var e=t.action,i=t.x;t.y;if(null==this.mCurrentView)return!1;switch(e){case c.ACTION_MOVE:u.d("event","move "),this.direction=i-this.oldx>0?1:-1,this.move(i-this.oldx),this.oldx=i;break;case c.ACTION_UP:case c.ACTION_CANCEL:this.oldx=-1,this.oldy=-1,0==Math.abs(this.downX-i)?i>=this.width/4*3?null!=this.mAreaTouchListener&&this.mAreaTouchListener.onLeftTouch():i<=this.width/4?null!=this.mAreaTouchListener&&this.mAreaTouchListener.onRightTouch():null!=this.mAreaTouchListener&&this.mAreaTouchListener.onMiddleTouch():this.prepareToAnimation(this.direction*this.mMin_speed)}return!0},e.prototype.onMeasure=function(t,e,n){var s=t.getMeasureValue(),a=e.getMeasureValue();this.mCenterX=s/2,this.mCenterY=a/2;for(var h=0;h<this.mViewStack.size();++h){var u=this.mViewStack.get(h).view,c=u.layoutParams,d=c.width,l=c.height;c.heightMode===r.MATCH_PARENT&&(l=a),c.widthMode===r.MATCH_PARENT&&(d=s),u.onMeasure(new o(d,c.widthMode),new o(l,c.heightMode),n)}var p=new i(s,a);return this.setMeasuredDimension(new o(p.width,r.EXACTLY),new o(p.height,r.EXACTLY)),p},e.prototype.onLayout=function(t,e,i,n,o){this.layoutInfo.reset(t,e,i,n,this.padding,0);this.layoutInfo.innerrect;for(var r=i-t,s=n-e,a=0;a<this.mViewStack.size();++a){var h=this.mViewStack.get(a).view,u=this.mViewStack.get(a).index-this.mIndex,c=h.padding.leftPadding+(r-h.width)/2,d=h.padding.topPadding+(s-h.height)/2;u=u>0?0:u,h.onLayout(c+u*r,d,c+u*r+h.width,d+h.height,o)}},e.prototype.dispatchDraw=function(t){11001===this.mAnimationState?(this.drawChild(t,this.mNextView),t.save(),t.translate(this.mPosition,0),this.drawChild(t,this.mCurrentView),t.restore()):11002===this.mAnimationState?(this.drawChild(t,this.mCurrentView),t.save(),t.translate(this.mPosition,0),this.drawChild(t,this.mPreView),t.restore()):this.drawChild(t,this.mCurrentView)},e.prototype.setAdapter=function(t){if(this.mOldAdapter=this.mAdapter,this.mAdapter=t,null!=this.mAdapter){this.mDataSetObserver=new a;var e=this;this.mDataSetObserver.onChanged=function(){e.mSize=e.mAdapter.getCount()},this.mDataSetObserver.onInvalidated=function(){e.invalidate(!1)},this.mAdapter.registerDataSetObserver(this.mDataSetObserver),this.mSize=t.getCount(),this.refreshNormal()}},e.prototype.setCurrentItem=function(t){u.d("setCurrentItem "+t),this.mIndex=t,this.refreshNormal(),this.pagerMovingEnd(this.mIndex)},e.prototype.getCurrentItem=function(){return this.mIndex},e.prototype.setPagerChangedListener=function(t){this.listener=t},e.prototype.refreshNormal=function(){if(this.mAdapter){if(!(this.mIndex>=0&&this.mIndex<this.mAdapter.getCount())){if(0===this.mAdapter.getCount()&&0===this.mIndex)return;throw"current index is "+this.mIndex+" size is "+this.mAdapter.getCount()}this.preRemove(),this.preLoad(this.mIndex);for(var t=0;t<this.mViewStack.size();++t){var e=this.mViewStack.get(t).view,i=this.mViewStack.get(t).index;i===this.mIndex&&(this.mCurrentView=e,this.addView(e,1,this.mLayoutParams)),i===this.mIndex-1&&(this.mPreView=e,this.addView(e,0,this.mLayoutParams)),i===this.mIndex+1&&(this.mNextView=e,this.addView(e,1,this.mLayoutParams))}}},e.prototype.preRemove=function(){for(var t=0;t<this.mViewStack.size();++t){var e=this.mViewStack.get(t).view,i=this.mViewStack.get(t).index;this.removeView(e),this.mAdapter.destoryItem(i,this)}},e.prototype.preLoad=function(t){null!==this.mAdapter&&(this.mViewStack.clear(),this.mViewStack.add(this.preLoadPreView(t)),this.mViewStack.add(this.loadView(t)),this.mViewStack.add(this.preLoadNextView(t)))},e.prototype.preLoadPreView=function(t){var e=t-1;return this.loadView(e)},e.prototype.preLoadNextView=function(t){var e=t+1;return this.loadView(e)},e.prototype.loadView=function(t){if(null===this.mAdapter)throw"Null point Exception adapter is null";var e=t;e>=this.mSize&&(e=0),e<0&&(e+=this.mSize);var i=this.mAdapter.initItem(e,this);return new g(i,t,e)},e.prototype.move=function(t){u.d("move "+t),0===this.mPosition&&0!==t&&this.pagerChanged(this.mIndex,t>0?this.mIndex+1:this.mIndex-1),this.mPosition+=t,this.mPosition>=0&&(this.mAnimationState=11002),this.mPosition<0&&(this.mAnimationState=11001);var e=this.mPosition/this.width,i=this.mPosition*(this.mIndex+1)/this.width*this.mAdapter.getCount();this.pagerMoving(e,i),this.invalidate(!1)},e.prototype.prepareToAnimation=function(t){var e=Date.now();this.mAnimationEnd=!1,this.mLastAnimationTime=e,this.mCurrentAnimationTime=e,this.mSpeed=t,0===this.mSpeed&&(this.mSpeed=this.mMin_speed),t>0?(this.mSpeed=Math.abs(this.mSpeed),this.doRightOrBounceAnimation()):(this.mSpeed=-1*Math.abs(this.mSpeed),this.doLeftOrBounceAnimation())},e.prototype.flipLeft=function(){if(u.d("flipLeft "+this.mAnimationEnd),this.mAnimationEnd){this.mPosition=this.mCurrentView.left,this.move(-1);var t=Date.now();this.mAnimationEnd=!1,this.mLastAnimationTime=t,this.mCurrentAnimationTime=t,this.mSpeed=-this.mMin_speed,this.doLeftOrBounceAnimation()}},e.prototype.flipRight=function(){if(u.d("filpRight "+this.mAnimationEnd),this.mAnimationEnd){this.mPosition=this.mCurrentView.left,this.move(1);var t=Date.now();this.mAnimationEnd=!1,this.mLastAnimationTime=t,this.mCurrentAnimationTime=t,this.mSpeed=this.mMin_speed,this.doRightOrBounceAnimation()}},e.prototype.doRightOrBounceAnimation=function(){Date.now();var t=1*this.mSpeed;if(this.mPosition>0){if(this.mPosition===this.width)return this.mHandler.removeMessages(10002),void this.endRightanimation();t+this.mPosition>this.width&&(t=this.width-this.mPosition)}else{if(0===this.mPosition)return this.mHandler.removeMessages(10002),void this.endBounceanimtion();t+this.mPosition>0&&(t=-this.mPosition)}this.move(t),this.mCurrentAnimationTime+=12.5,this.mHandler.removeMessages(10001),this.mHandler.removeMessages(10002),this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(10002),12.5)},e.prototype.doLeftOrBounceAnimation=function(){Date.now();var t=1*this.mSpeed;if(this.mPosition<0){if(this.mPosition+this.width==0)return this.mHandler.removeMessages(10001),void this.endLeftAnimation();t+this.mPosition+this.width<0&&(t=-(this.mPosition+this.width))}else{if(0==this.mPosition)return this.mHandler.removeMessages(10001),void this.endBounceanimtion();t+this.mPosition<0&&(t=-this.mPosition)}this.move(t),this.mCurrentAnimationTime+=12.5,this.mHandler.removeMessages(10001),this.mHandler.removeMessages(10002),this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(10001),12.5)},e.prototype.endBounceanimtion=function(){u.d("endBounceanimtion  "),this.mAnimationEnd=!0,this.mScale=0,this.mPosition=0,this.mAnimationState=0,this.pagerMovingEnd(this.mIndex)},e.prototype.endRightanimation=function(){u.d("endRightanimation   ");var t=this.mIndex-1;t<0&&(t=this.mAdapter.getCount()+t),this.mPosition=0,this.mScale=0,this.mAnimationState=0,this.setCurrentItem(t),this.mAnimationEnd=!0,this.pagerMovingEnd(this.mIndex)},e.prototype.endLeftAnimation=function(){u.d("endLeftAnimation   ");var t=this.mIndex+1;this.mPosition=0,this.mScale=0,t%=this.mAdapter.getCount(),this.mAnimationState=0,this.setCurrentItem(t),this.mAnimationEnd=!0,this.pagerMovingEnd(this.mIndex)},e.prototype.pagerChanged=function(t,e){null!=this.listener&&this.listener.onPagerChanged(t,e)},e.prototype.pagerMoving=function(t,e){null!=this.listener&&this.listener.onPagerMoving(-1*t,-1*e)},e.prototype.pagerMovingEnd=function(t){null!=this.listener&&this.listener.onPagerMovingEnd(t)},e}(n);e.ViewPager=f;var g=function(){return function(t,e,i){this.view=t,this.index=e,this.position=i}}()}(t.widget||(t.widget={}))}(android||(android={}));!function(t){!function(t){!function(t){!function(t){t[t.Alpha=0]="Alpha",t[t.Translate=1]="Translate",t[t.Scale=2]="Scale",t[t.Rotate=3]="Rotate"}(t.AnimationType||(t.AnimationType={}))}(t.animation||(t.animation={}))}(t.view||(t.view={}))}(android||(android={}));!function(t){!function(t){!function(t){var e=function(t){function e(){var e=t.call(this)||this;return e.duration=0,e}return __extends(e,t),Object.defineProperty(e.prototype,"isAniamtionEnd",{get:function(){return this.start+this.duration<Date.now()},enumerable:!0,configurable:!0}),e.prototype.scale=function(t){return console.log("ease "+(t-this.start)/this.duration),this.ease.ease((t-this.start)/this.duration)},e.prototype.applyTransformation=function(t,e,i){e.scale(this.from+(this.to-this.from)*t,this.from+(this.to-this.from)*t)},e}(t.Animation);t.ScaleAnimation=e}(t.animation||(t.animation={}))}(t.view||(t.view={}))}(android||(android={}));var android;!function(t){!function(t){var e=function(){return function(t,e){this.currentRect=t,this.index=e}}();t.RenderState=e}(t.view||(t.view={}))}(android||(android={}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,

//# sourceMappingURL=data:application/json;charset=utf8;base64,
